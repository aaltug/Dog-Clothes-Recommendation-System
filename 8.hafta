import os
import numpy as np
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics.pairwise import euclidean_distances
from tensorflow.keras.models import Model
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2

def extract_features(image_path):
    img = image.load_img(image_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)
    features = model.predict(img_array)
    return features.flatten()

def extract_color_histogram(image_path, bins=(8, 8, 8)):
    img = image.load_img(image_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = img_array / 255.0  # Normalize pixel values to [0, 1]
    hist = cv2.calcHist([img_array], [0, 1, 2], None, bins, [0, 256, 0, 256, 0, 256])
    hist = hist.flatten()
    hist /= np.sum(hist)  # Normalize histogram
    return hist

base_model = VGG16(weights='imagenet')
model = Model(inputs=base_model.input, outputs=base_model.get_layer('fc2').output)

# Kıyafet resimlerinin bulunduğu klasör
image_folder = "/content/sample_data/UntitledFolder"

# Kıyafet resimlerinin listesi
image_files = [f for f in os.listdir(image_folder) if f.endswith('.jpg') or f.endswith('.png')]

# Kıyafetlerin özellik vektörlerini ve renk histogramları
features = []
color_histograms = []
for image_file in image_files:
    image_path = os.path.join(image_folder, image_file)
    feature_vector = extract_features(image_path)
    color_hist = extract_color_histogram(image_path)
    features.append(feature_vector)
    color_histograms.append(color_hist)

# Benzerlik matrisi
cosine_similarities = cosine_similarity(features, features)
color_distances = euclidean_distances(color_histograms, color_histograms)


threshold_cosine = 0.8  # Cosine benzerliği için belirlediğiniz bir eşik değeri
threshold_color = 0  # Renk benzerliği için belirlediğiniz bir eşik değeri

similar_items_cosine = np.where(cosine_similarities > threshold_cosine)

# Benzer kıyafetleri yazdırır ve görsel olarak gösterir
for i, j in zip(similar_items_cosine[0], similar_items_cosine[1]):
    if i != j:
        # Renk benzerliği kontrolü
        color_sim = color_similarity(color_histograms[i], color_histograms[j])
        if color_sim < threshold_color:
            continue  # Renk benzerliği eşik değerini karşılamıyorsa devam eder

        print(f"Benzer kıyafetler: {image_files[i]} ve {image_files[j]}")

        img1 = mpimg.imread(os.path.join(image_folder, image_files[i]))
        img2 = mpimg.imread(os.path.join(image_folder, image_files[j]))

        plt.figure(figsize=(8, 4))
        plt.subplot(1, 2, 1)
        plt.imshow(img1)
        plt.title(f"Benzer Kıyafet: {image_files[i]}")

        plt.subplot(1, 2, 2)
        plt.imshow(img2)
        plt.title(f"Benzer Kıyafet: {image_files[j]}")

        plt.show()
